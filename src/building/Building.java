package building;

import java.util.ArrayList;

import budget.Budget;

public abstract class Building implements Buildable {
protected String type; //type of building
protected int size; // size of building
protected int monthBuilt; //when it was built
public int cost; //one-time cost of building
public int taxIncome; //income generated by building
public int upkeep; //monthly cost of building


public Building(String type,int size, int monthBuilt, int cost, int taxIncome, int upkeep) {
	this.setMonthBuilt(monthBuilt);
	this.type=type;
	this.size=size;
	this.cost=cost;
	this.taxIncome=taxIncome;
	this.upkeep=upkeep;
}

public String getType() {
	return this.type;
}
public int getSize() {
	return this.size;
}
public void setMonthBuilt(int month) {
	this.monthBuilt= month;
}
public int getMonthBuilt() {
	return this.monthBuilt;
}
public int getCost() {
	return this.cost;
}
public int getTaxIncome() {
	return this.taxIncome;
}
public int getUpkeep() {
	return this.upkeep;
}


public static String getBuildingStats(Building[][] newLand, int row, int column) {
	Building b= newLand[row][column];
	if (b!= null) {
		String statement="This building is a(n) " + b.getType() + ". It was built in month " + b.getMonthBuilt() +" on row " + row +" and column "+ column + ". It costed " + b.getCost() +" to build, costs " + b.getUpkeep() + " every month as upkeep, and generates " + b.getTaxIncome()+ " in tax income.";
		return statement;
	} else {
		return "There is no building here.";
	}
}

//count all of a specific type of building in the land
public static int getBuildingCount(Building[][] newLand, String searchtype){
	ArrayList<Building> countedBuildings= new ArrayList<>();
	int count=0;
	for (int i=0;i<newLand.length;i++) {//for each row
		for(int j=0; j<newLand[i].length; j++){//for each column
			if (newLand[i][j] != null && newLand[i][j].type.equals(searchtype) && !countedBuildings.contains(newLand[i][j])) {
				count ++;
				countedBuildings.add(newLand[i][j]);
			}
		}
	}
	return count;
}

//builds requested building on land after checking if empty
public void build(Building[][] newLand, Building b, int row, int column, Budget budget) {
	newLand[row][column]= b;
		if(b.getSize()==4) {
			newLand[row+1][column]=b;
			newLand[row][column+1]=b;
			newLand[row+1][column+1]=b;
		} else if (b.getSize()==2) {//ranger station only goes horizontal
			newLand[row][column+1]=b;
		}
		int current= budget.getCurrentAmount();
		current= current-b.getCost();
		budget.setCurrentAmount(current);
		String buildingType= b.getType();
		int count=getBuildingCount(newLand,buildingType);
		count=count+1;
		}

//checks if land is empty before building on it
public boolean isEmptyLand(Building[][] newLand, Building b, int row, int column) {
	int size= b.size;
	switch (size) {
	case 1:
		if (newLand[row][column]==null) {
			return true;
		}
		break;
	case 2:
		if (newLand[row][column]==null) {
			if (newLand[row][column+1]==null){
				return true;
			}
		}
		break;
	case 4:
		if (newLand[row][column]==null) {
			if (newLand[row+1][column+1]==null && newLand[row+1][column]==null && newLand[row][column+1]==null){
				return true;
			}
		}
		break;
	}
	return false;
}
}
